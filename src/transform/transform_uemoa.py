import pandas as pd
import logging
from datetime import datetime

# === Configuration du logging ===
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# === Configuration des fichiers ===
input_csv = "/Users/NOKHO/Desktop/Meteo/historique_meteo_uemoa_80villes.csv"
output_csv = "/Users/NOKHO/Desktop/Meteo/historique_meteo_uemoa_80villes_clean.csv"

# === Nettoyage des donn√©es ===
def nettoyer_donnees(df):
    """
    Nettoie et transforme les donn√©es m√©t√©orologiques
    """
    logging.info("‚è≥ Conversion des dates...")
    df['datetime'] = pd.to_datetime(df['datetime'])

    weather_codes = {
        0: 'Ensoleill√©', 1: 'Principalement clair', 2: 'Partiellement nuageux', 3: 'Couvert',
        45: 'Brouillard', 48: 'Brouillard givrant', 51: 'Bruine l√©g√®re', 53: 'Bruine mod√©r√©e',
        55: 'Bruine dense', 56: 'Bruine vergla√ßante l√©g√®re', 57: 'Bruine vergla√ßante dense',
        61: 'Pluie l√©g√®re', 63: 'Pluie mod√©r√©e', 65: 'Pluie forte', 66: 'Pluie vergla√ßante l√©g√®re',
        67: 'Pluie vergla√ßante forte', 71: 'Chute de neige l√©g√®re', 73: 'Chute de neige mod√©r√©e',
        75: 'Chute de neige forte', 77: 'Grains de neige', 80: 'Averses de pluie l√©g√®res',
        81: 'Averses de pluie mod√©r√©es', 82: 'Averses de pluie violentes', 85: 'Averses de neige l√©g√®res',
        86: 'Averses de neige fortes', 95: 'Orage l√©ger ou mod√©r√©', 96: 'Orage avec gr√™le l√©g√®re',
        99: 'Orage avec gr√™le forte'
    }

    logging.info("üß† Normalisation des conditions m√©t√©o (codes ou texte)...")

    def normaliser_condition(val):
        try:
            code = int(float(val))
            return weather_codes.get(code, 'Inconnu')
        except:
            return str(val).strip().capitalize() if pd.notnull(val) else 'Inconnu'

    df['conditions'] = df['conditions'].apply(normaliser_condition)

    logging.info("üí® Conversion des vitesses du vent en km/h...")
    df['windspeed'] = df['windspeed'] * 3.6
    df['windgust'] = df['windgust'] * 3.6

    logging.info("‚òÅÔ∏è Estimation de la couverture nuageuse...")
    def cloud_cover_from_weathercode(x):
        if x in ['Ensoleill√©', 'Principalement clair']: return 0.2
        elif x == 'Partiellement nuageux': return 0.5
        elif x == 'Couvert': return 0.8
        elif x in ['Brouillard', 'Brouillard givrant']: return 1.0
        else: return 0.6
    df['cloudcover'] = df['conditions'].apply(cloud_cover_from_weathercode)

    logging.info("üìè Arrondi des colonnes num√©riques...")
    numeric_cols = ['tempmax', 'tempmin', 'temp', 'feelslikemax', 'feelslikemin',
                    'feelslike', 'dew', 'precip', 'windgust', 'windspeed',
                    'solarradiation', 'solarenergy', 'uvindex']
    for col in numeric_cols:
        if col in df.columns:
            df[col] = df[col].round(2)

    cols_order = ['datetime', 'Pays', 'Ville', 'latitude', 'longitude', 'temp', 'tempmax', 'tempmin',
                  'feelslike', 'feelslikemax', 'feelslikemin', 'dew', 'humidity', 'precip',
                  'precipcover', 'windgust', 'windspeed', 'winddir', 'cloudcover',
                  'solarradiation', 'solarenergy', 'uvindex', 'conditions']
    cols_order = [col for col in cols_order if col in df.columns]

    return df[cols_order]

# === Script principal ===
if __name__ == "__main__":
    logging.info("üöÄ D√©but du processus de nettoyage")

    try:
        logging.info(f"üìÇ Chargement du fichier : {input_csv}")
        df = pd.read_csv(input_csv)
        logging.info(f"‚úÖ Fichier charg√© avec {len(df)} lignes")
    except Exception as e:
        logging.error(f"‚ùå Erreur lors du chargement du fichier CSV : {e}")
        exit(1)

    try:
        logging.info("üßπ Nettoyage en cours...")
        df_clean = nettoyer_donnees(df)
        df_clean.to_csv(output_csv, index=False)
        logging.info(f"‚úÖ Donn√©es nettoy√©es et sauvegard√©es dans {output_csv}")
    except Exception as e:
        logging.error(f"‚ùå Erreur lors du nettoyage : {e}")
        exit(1)

    logging.info("üéâ Nettoyage termin√© avec succ√®s.")
